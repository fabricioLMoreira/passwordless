import boto3
import base64
import json
from decimal import Decimal
from datetime import datetime
import random
import time

rekognition = boto3.client('rekognition')
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('Users')
sns = boto3.client('sns')
s3 = boto3.client('s3')

BUCKET_NAME = 'rekognition-imagens'
SIMILARITY_THRESHOLD = 80
TOPIC_ARN = 'arn:aws:sns:us-east-1:347662794020:rekognition_sns'

def lambda_handler(event, context):
    try:
        body = json.loads(event['body'])
        image_base64 = body['imageBase64']
        image_bytes = base64.b64decode(image_base64)

        # Consulta os users no DynamoDB
        users = table.scan().get('Items', [])

        for user in users:
            s3_key = user['s3_key']
            try:
                result = rekognition.compare_faces(
                    SourceImage={'Bytes': image_bytes},
                    TargetImage={'S3Object': {'Bucket': BUCKET_NAME, 'Name': s3_key}},
                    SimilarityThreshold=SIMILARITY_THRESHOLD
                )

                if result['FaceMatches']:
                    similarity = result['FaceMatches'][0]['Similarity']

                    # Gera código
                    code = str(random.randint(100000, 999999))
                    expires = int(time.time()) + 300  # 5 minutos

                    # Grava código no utilizador
                    table.update_item(
                        Key={'id': user['id']},
                        UpdateExpression='SET auth_code = :code, auth_expires = :exp',
                        ExpressionAttributeValues={
                            ':code': code,
                            ':exp': expires
                        }
                    )

                    # Envia código por email (SNS)
                    sns.publish(
                        TopicArn=TOPIC_ARN,
                        Subject='Código de autenticação',
                        Message=f"Olá {user['name']},\n\nO teu código de autenticação é: {code}.\nExpira em 5 minutos."
                    )

                    return _response(200, {
                        "match": True,
                        "user": {
                            "id": int(user['id']),
                            "name": user['name'],
                            "similarity": float(similarity)
                        }
                    })

            except Exception as e:
                print(f"Erro ao comparar com {s3_key}: {e}")

        # Nenhuma correspondência encontrada → envia alerta por SNS
        sns.publish(
            TopicArn=TOPIC_ARN,
            Subject="❌ Alerta de Segurança: Login falhado",
            Message="Foi feita uma tentativa de login via reconhecimento facial, mas não foi encontrado nenhum rosto correspondente na base de dados."
        )

        return _response(200, {"match": False})

    except Exception as e:
        print("Erro geral:", str(e))
        return _response(500, {"error": str(e)})

def _response(status_code, body):
    return {
        "statusCode": status_code,
        "headers": {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': '*',
            'Access-Control-Allow-Methods': 'POST,OPTIONS'
        },
        "body": json.dumps(body)
    }
